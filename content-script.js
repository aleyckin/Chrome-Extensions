(async () => {
    try {
      console.log('üü¢ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω');
  
      const appId = 730;
      const contextId = 2;
  
      const waitForItems = () =>
        new Promise(resolve => {
          let tries = 0;
          const interval = setInterval(() => {
            const els = document.querySelectorAll('.inventory_page .itemHolder');
            console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ ${tries + 1}: –ù–∞–π–¥–µ–Ω–æ ${els.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
            if (els.length || ++tries > 10) {
              clearInterval(interval);
              resolve(els);
            }
          }, 300);
        });
  
      const holders = await waitForItems();
      if (!holders.length) {
        console.warn('‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }
  
    async function getSteamID64(vanityUrl) {
      try {
        // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º XML-—Å—Ç—Ä–∞–Ω–∏—Ü—É
        const response = await fetch(`https://steamcommunity.com/id/${vanityUrl}/?xml=1`);
        const xmlText = await response.text();
        
        // 2. –ü–∞—Ä—Å–∏–º XML
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xmlText, "text/xml");
        
        // 3. –ò–∑–≤–ª–µ–∫–∞–µ–º steamID64
        const steamID64 = xmlDoc.querySelector('steamID64').textContent;
        
        return steamID64 || null;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', error);
        return null;
      }
    }

  

    const steamId =
    ( (typeof g_rgProfileData !== 'undefined' && g_rgProfileData.steamid) || window.location.href.match(/\/profiles\/(\d+)/)?.[1]) ||
     (typeof g_steamID !== 'undefined' && g_steamID) || await getSteamID64(window.location.href.match(/\/id\/([^\/]+)/)?.[1]) ||null;
  
      const inventoryUrl = `https://steamcommunity.com/inventory/${steamId}/${appId}/${contextId}?l=english&count=5000`;
      console.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:', inventoryUrl);
  
      const inventoryResponse = await fetch(inventoryUrl);
      if (!inventoryResponse.ok) throw new Error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è');
      const inventoryJson = await inventoryResponse.json();
  
      const assets = inventoryJson.assets || [];
      const descriptions = inventoryJson.descriptions || [];
  
      const assetMap = {};
      assets.forEach(asset => {
        assetMap[asset.assetid] = asset.classid + '_' + asset.instanceid;
      });
  
      const descriptionMap = {};
      descriptions.forEach(desc => {
        const key = desc.classid + '_' + desc.instanceid;
        descriptionMap[key] = desc;
      });
  
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –∏–∑ sessionStorage
      const rawCache = sessionStorage.getItem('priceCache');
      const priceCache = rawCache ? JSON.parse(rawCache) : {};
  
      const sleep = ms => new Promise(r => setTimeout(r, ms));
  
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ API
      async function getPrice(url) {
        try {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—ç—à–∞
          const rawCache = sessionStorage.getItem('priceCache');
          const priceCache = rawCache ? JSON.parse(rawCache) : {};

          if (priceCache[url]) {
            console.log('üíæ –¶–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ:', priceCache[url]);
            return priceCache[url];
          } else {
            console.log('üì° –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
            const response = await chrome.runtime.sendMessage({ action: 'getPrice', url });
            
            // –ó–∞—â–∏—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined
            if (!response) {
              throw new Error("–û—Ç–≤–µ—Ç –æ—Ç background.js –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
            }

            if (!response.success) {
              throw new Error(response.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
            }

            const priceData = response.data;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
            priceCache[url] = priceData;
            sessionStorage.setItem('priceCache', JSON.stringify(priceCache));

            return priceData;
          }

        } catch (e) {
          console.warn('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã:', e);
          return null;
        }
      }
  
      const itemsWithPrices = [];
  
      for (const holder of holders) {
        const itemDiv = holder.querySelector('.item');
        if (!itemDiv) continue;
  
        const link = holder.querySelector('a.inventory_item_link');
        const assetKey = link && link.href.startsWith('#')
          ? link.href.slice(link.href.indexOf('#') + 1)
          : itemDiv.id;
  
        const assetId = assetKey.split('_')[2];
        const descriptionKey = assetMap[assetId];
        const description = descriptionMap[descriptionKey];
        if (!description) continue;
  
        const marketHashName = encodeURIComponent(description.market_hash_name);
        const priceUrl = `https://steamcommunity.com/market/priceoverview/?currency=1&appid=${appId}&market_hash_name=${marketHashName}`;
  
        const priceData = await getPrice(priceUrl);
        await sleep(200);
        const price = priceData?.lowest_price || 'N/A';
  
        const priceLabel = document.createElement('div');
        priceLabel.textContent = price;
        Object.assign(priceLabel.style, {
          position: 'absolute',
          bottom: '0',
          left: '0',
          background: 'rgba(0,0,0,0.7)',
          color: '#fff',
          fontSize: '11px',
          padding: '2px 4px',
          zIndex: '9999',
          whiteSpace: 'nowrap',
          overflow: 'hidden',
          textOverflow: 'ellipsis',
          width: '100%',
          boxSizing: 'border-box'
        });
  
        holder.style.position = 'relative';
        holder.style.transition = 'all 0.4s ease';
        holder.appendChild(priceLabel);
  
        const numericPrice = parseFloat(price.replace(/[^0-9.]/g, '')) || 0;
        itemsWithPrices.push({ holder, numericPrice });
      }
  
      console.log(`‚úÖ –¶–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã. –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ü–µ–Ω–æ–π: ${itemsWithPrices.length}`);
  
      // UI-–ø–∞–Ω–µ–ª—å
      const controlPanel = document.createElement('div');
      Object.assign(controlPanel.style, {
        position: 'fixed',
        top: '80px',
        right: '20px',
        zIndex: 10000,
        display: 'flex',
        flexDirection: 'column',
        gap: '10px'
      });
      document.body.appendChild(controlPanel);
  
      const loadingLabel = document.createElement('div');
      loadingLabel.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω...';
      Object.assign(loadingLabel.style, {
        padding: '10px 15px',
        backgroundColor: '#444',
        color: 'white',
        borderRadius: '5px',
        fontSize: '14px',
        textAlign: 'center'
      });
      controlPanel.appendChild(loadingLabel);
  
      await sleep(300);
      controlPanel.removeChild(loadingLabel);
  
      const createButton = (text, background, callback) => {
        const btn = document.createElement('button');
        btn.textContent = text;
        Object.assign(btn.style, {
          padding: '10px 15px',
          backgroundColor: background,
          color: 'white',
          border: 'none',
          borderRadius: '5px',
          cursor: 'pointer',
          fontSize: '14px',
          boxShadow: '0 2px 5px rgba(0,0,0,0.3)'
        });
        btn.addEventListener('click', () => {
          console.log(`üîò –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: ${text}`);
          callback();
        });
        controlPanel.appendChild(btn);
      };
  
      const container = holders[0]?.parentElement;
      if (!container) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è itemHolder');
        return;
      }
  
      const originalOrder = [...itemsWithPrices];
  
      createButton('–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ü–µ–Ω–µ', '#5c7e10', () => {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —ç–ª–µ–º–µ–Ω—Ç—ã
        itemsWithPrices.sort((a, b) => b.numericPrice - a.numericPrice);
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        container.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        itemsWithPrices.forEach(({ holder }) => {
          if (holder) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            container.appendChild(holder);
          }
        });
      });
  
      createButton('–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É', '#7a0f0f', () => {
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        container.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        originalOrder.forEach(({ holder }) => {
          if (holder) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            container.appendChild(holder);
          }
        });
      });
  
      console.log('üèÅ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è content-script:', err);
    }
  })();
  