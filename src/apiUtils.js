export async function waitForItems() {
    return new Promise(resolve => {
      let tries = 0;
      const interval = setInterval(() => {
        const els = document.querySelectorAll('.inventory_page .itemHolder');
        console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ ${tries + 1}: –ù–∞–π–¥–µ–Ω–æ ${els.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
        if (els.length || ++tries > 10) {
          clearInterval(interval);
          resolve(els);
        }
      }, 300);
    });
  }
  
  export async function getSteamID64(url) {
    try {
      const response = await fetch(`https://steamcommunity.com/id/${url}/?xml=1`);
      const xmlText = await response.text();
      const parser = new DOMParser();
      const xmlDoc = parser.parseFromString(xmlText, "text/xml");
      return xmlDoc.querySelector('steamID64')?.textContent || null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', error);
      return null;
    }
  }
  
  export async function getInventory(steamId, appId, contextId) {
    const inventoryUrl = `https://steamcommunity.com/inventory/${steamId}/${appId}/${contextId}?l=english&count=5000`;
    const inventoryResponse = await fetch(inventoryUrl);
    if (!inventoryResponse.ok) throw new Error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è');
    return await inventoryResponse.json();
  }
  
  export async function getPrice(url, priceCache) {
    if (priceCache[url]) {
      console.log('üíæ –¶–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ:', priceCache[url]);
      return priceCache[url];
    } else {
      console.log('üì° –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
      const response = await chrome.runtime.sendMessage({ action: 'getPrice', url });
      if (!response || !response.success) {
        throw new Error(response?.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
      }
      const priceData = response.data;
      priceCache[url] = priceData;
      localStorage.setItem('priceCache', JSON.stringify(priceCache));
      return priceData;
    }
  }

  