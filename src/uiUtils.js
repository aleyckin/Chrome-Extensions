export function createControlPanel() {
    const controlPanel = document.createElement('div');
    Object.assign(controlPanel.style, {
      position: 'fixed',
      top: '80px',
      right: '20px',
      zIndex: 10000,
      display: 'flex',
      flexDirection: 'column',
      gap: '10px'
    });
    document.body.appendChild(controlPanel);
    return controlPanel;
  }
  
  export function createSortButton(controlPanel, allItems, container, sortCounter) {
    const button = document.createElement('button');
    button.textContent = `–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ü–µ–Ω–µ ‚Üë`;

    button.addEventListener('click', () => {
      const itemsWithPrices = allItems.filter(item => typeof item.numericPrice === 'number');
      const itemsWithoutPrices = allItems.filter(item => typeof item.numericPrice !== 'number');

      itemsWithPrices.sort((a, b) => {
        const priceA = typeof a.numericPrice === 'number' ? a.numericPrice : Infinity;
        const priceB = typeof b.numericPrice === 'number' ? b.numericPrice : Infinity;
        return sortCounter === 0 ? priceB - priceA : priceA - priceB;
      });

      sortCounter = 1 - sortCounter;
      button.textContent = sortCounter === 0 ? `–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ü–µ–Ω–µ ‚Üë` : `–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ü–µ–Ω–µ ‚Üì`;

      const sortedItems = [...itemsWithPrices, ...itemsWithoutPrices];

      const pages = [...document.querySelectorAll('.inventory_page')]
        .filter(el => el.tagName.toLowerCase() === 'div');
      const PAGE_SIZE = 25;

  

      // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      pages.forEach(page => page.innerHTML = '');

      // –ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      sortedItems.forEach(({ holder }, index) => {
        const pageIndex = Math.floor(index / PAGE_SIZE);
        const page = pages[pageIndex];
        if (page) {
          page.appendChild(holder);
        } else {
          console.warn(`‚ö† –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ ‚Ññ${index}`);
        }
      });

      console.log('‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', sortedItems.length);
    });

    controlPanel.appendChild(button);
  }

  
  export function createResetButton(controlPanel, originalOrder, container) {
    const button = document.createElement('button');
    button.textContent = '–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É';
    button.style.marginLeft = '10px';

    button.addEventListener('click', () => {
      const PAGE_SIZE = 25;
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      const pages = [...document.querySelectorAll('.inventory_page')]
        .filter(el => el.tagName.toLowerCase() === 'div');

      // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      pages.forEach(page => page.innerHTML = '');

      // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ originalOrder –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
      originalOrder.forEach(({ holder }, index) => {
        const pageIndex = Math.floor(index / PAGE_SIZE);
        const page = pages[pageIndex];
        if (page && holder) {
          page.appendChild(holder);
        } else {
          console.warn(`‚ö† –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ ‚Ññ${index}`);
        }
      });

      // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∫—Ä—ã—Ç—å
      pages.forEach((page, i) => {
        page.style.display = i === 0 ? 'block' : 'none';
      });

      console.log('üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞, —ç–ª–µ–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
    });

    controlPanel.appendChild(button);
  }

  
  export function createResetCacheButton(controlPanel, priceCache) {
    const button = document.createElement('button');
    button.textContent = '–°–±—Ä–æ—Å–∏—Ç—å –∫—ç—à';
    button.style.padding = '10px 15px';
    button.style.backgroundColor = '#f44336';
    button.style.color = '#fff';
    button.style.border = 'none';
    button.style.borderRadius = '5px';
    button.style.cursor = 'pointer';

    button.addEventListener('click', () => {
      localStorage.removeItem('priceCache');

      for (const key in priceCache) {
        delete priceCache[key];
      }

      alert('–ö—ç—à —Ü–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω ‚úÖ');
      location.reload();
    });

    controlPanel.appendChild(button);
  }



  export function createTypeFilter(typeMap, controlPanel) {
    const typeFilterPanel = document.createElement('div');
    Object.assign(typeFilterPanel.style, {
      padding: '10px',
      backgroundColor: '#222',
      borderRadius: '5px',
      color: 'white',
      fontSize: '13px',
      maxWidth: '200px',
      overflowY: 'auto',
      maxHeight: '300px'
    });
    typeFilterPanel.innerHTML = '<b>–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É:</b><br>';
    controlPanel.appendChild(typeFilterPanel);
  
    const checkboxStates = {};
    const checkboxes = {};
    let allChecked = false;
  
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ –ø–æ —Ç–∏–ø–∞–º
    typeMap.forEach((holders, type) => {
      const label = document.createElement('label');
      label.style.display = 'block';
      label.style.cursor = 'pointer';
      label.style.marginBottom = '5px';
  
      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.checked = true;
      checkboxStates[type] = true;
  
      checkboxes[type] = checkbox;
  
      checkbox.addEventListener('change', () => {
        checkboxStates[type] = checkbox.checked;
        holders.forEach(h => {
          h.style.display = checkbox.checked ? '' : 'none';
        });
      });
  
      label.appendChild(checkbox);
      label.append(` ${type}`);
      typeFilterPanel.appendChild(label);
    });
  
    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö
    const toggleContainer = document.createElement('div');
    toggleContainer.style.marginBottom = '10px';
  
    const toggleAllBtn = document.createElement('button');
    toggleAllBtn.textContent = '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ';
    toggleAllBtn.style.margin = '10px';
    toggleAllBtn.style.padding = '5px 10px';
    toggleAllBtn.style.cursor = 'pointer';
  
    toggleContainer.appendChild(toggleAllBtn);
    typeFilterPanel.prepend(toggleContainer);
  
    allChecked = Object.values(checkboxes).every(cb => cb.checked);
    toggleAllBtn.textContent = allChecked ? '–°–Ω—è—Ç—å –≤—Å–µ' : '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ';
  
    toggleAllBtn.addEventListener('click', () => {
      allChecked = !allChecked;
  
      Object.entries(checkboxes).forEach(([type, checkbox]) => {
        checkbox.checked = allChecked;
        checkboxStates[type] = allChecked;
  
        const holders = typeMap.get(type);
        if (holders) {
          holders.forEach(h => {
            h.style.display = allChecked ? '' : 'none';
          });
        }
      });
  
      toggleAllBtn.textContent = allChecked ? '–°–Ω—è—Ç—å –≤—Å–µ' : '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ';
    });
  }
  